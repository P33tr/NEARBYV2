@using NearX.Models
@inject IDialogService _dialogService
@inject NavigationManager _navManager
@inject StateContainer _stateContainer
@inject IHttpClientFactory _clientFactory
@implements IDisposable

    <MudDialog>
        <TitleContent>
            <MudIcon Icon="@Icons.Material.Filled.LocalCafe"></MudIcon>Review
        </TitleContent>
        <DialogContent>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Element Id</th>
                    <th>User Id</th>
                    <th>Note</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (NearXShared.Models.Review review in reviews)
                {
                    <tr>
                        <td>@review.Id</td>
                        <td>@review.ElementId</td>
                        <td>@review.UserId</td>
                        <td>@review.Note</td>
                        <td>
                            <a class="btn btn-success" href="review/edit/@review.Id">Edit</a>
                        </td>
                    </tr>
                }

                </tbody>
            </table>

        </DialogContent>
        <DialogActions>
            <MudFab
                Color="Color.Secondary"
                Icon="@Icons.TwoTone.Close"
                Size="Size.Small"
                IconSize="Size.Small"
                Label="Cancel"
                OnClick="Cancel"></MudFab>
        </DialogActions>
    </MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Element cafe { get; set; } = new Element();

    NearXShared.Models.Review review = new NearXShared.Models.Review();
    
    MudForm form;
    bool success;
    string[] errors = { };
    HttpClient client;
    NearXShared.Models.Review[] reviews { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _stateContainer.OnChange += StateHasChanged;
        client = _clientFactory.CreateClient("NearXServer");
        reviews = await client.GetFromJsonAsync<NearXShared.Models.Review[]>("api/review");
        
    }

    void Cancel() => MudDialog.Close(DialogResult.Ok(true));

    public async Task SaveReview(MouseEventArgs args)
    {
        Console.WriteLine($"Cafe id is {cafe.id}");
        Console.WriteLine($"Cafe review is {review.Note}");
        review.UserId = _stateContainer.UserId;
        review.ElementId = cafe.id;
        HttpClient client = _clientFactory.CreateClient("NearXServer");
        await client.PostAsJsonAsync("api/review", review);
        _stateContainer.ReviewCount = 10;
        MudDialog.Close(DialogResult.Ok(true));

    }

    public void Dispose()
    {
        _stateContainer.OnChange -= StateHasChanged;
    }
}


